const {
  matrixMultiplicationSimple,
  matrixMultiplicationStrassen,
  matrixMultiplicationTypical,
} = require("./matrixMultiplication.ts");

describe("matrixMultiplicationSimple", () => {
  it("returns correct value", () => {
    const n = 3,
      m = 2,
      p = 4;
    const matrix1 = [
      [1, 5],
      [2, 7],
      [4, 1],
    ];
    const matrix2 = [
      [1, 5, 3, 4],
      [4, 2, 1, 5],
    ];

    const result = matrixMultiplicationSimple(n, m, p, matrix1, matrix2);
    expect(result).toEqual([
      [21, 15, 8, 29],
      [30, 24, 13, 43],
      [8, 22, 13, 21],
    ]);
  });
  it("returns correct value", () => {
    const n = 2,
      m = 2,
      p = 2;
    const matrix1 = [
      [1, 5],
      [2, 7],
    ];
    const matrix2 = [
      [1, 5],
      [4, 2],
    ];

    const result = matrixMultiplicationStrassen(n, m, p, matrix1, matrix2);
    expect(result).toEqual([
      [21, 15],
      [30, 24],
    ]);
  });
  it("returns correct value", () => {
    const n = 15,
      m = 15,
      p = 15;
    // prettier-ignore
    const matrix1 = [
      [629,  688, 397, 981, 190, 824, 546, 315, 241,  27, 509, 630, 794, 725, 780],
      [778,  277, 358, 968, 624,  63, 822, 379, 867, 619, 547, 952, 865, 615, 403],
      [ 88,  206, 931, 148, 906, 670, 368, 457, 383, 833, 938, 381, 709, 838, 936],
      [766,  828, 252,  82, 286,  37, 848, 906, 586, 519,  52, 708, 124,   6, 449],
      [680,  311, 261, 555, 502, 499, 844, 737, 236, 248, 574, 586, 468, 591, 134],
      [216,  193, 746, 908, 875, 523, 671, 446, 242, 918, 687, 217, 475, 684, 265],
      [441,  451, 249, 681, 277, 362, 681, 333, 728, 957, 330, 171, 198, 244, 970],
      [930,  111, 623, 668,  24, 132, 685, 226, 946, 292, 681, 853,  17, 714, 486],
      [438,  358, 475, 568, 104,  43,  53,  32, 991, 129, 782,  75, 786, 586, 815],
      [973,  886, 810,  88, 778, 669, 267, 237,   3, 453, 337, 593, 930, 368,  17],
      [269,  107, 993, 775, 559, 703, 666, 133, 969, 331, 114, 605, 915, 513, 579],
      [731,  999, 192, 304,   1, 811, 187, 555, 573, 836, 508, 127, 456, 475, 516],
      [231, 1000, 613, 844, 221, 445, 859, 200, 382, 715, 918, 608, 759,  44, 365],
      [950,  703, 577,  16,  97, 160,  80, 341, 806, 954, 828, 807, 194, 284,  34],
      [510,  217, 147, 195, 776, 393, 876,  41, 642, 803, 604, 963, 392, 763, 937],
    ]
    // prettier-ignore
    const matrix2 = [
      [131, 521, 990, 601, 120, 689,   6, 667, 719, 951,  10, 273, 293, 543, 863],
      [522, 954, 522, 396, 734, 280, 439, 590, 607, 340, 464, 785, 435, 116, 792],
      [817, 423, 894, 540, 809, 409, 372, 280, 717, 347,  22, 839,  91, 887, 522],
      [ 14,  83, 569, 982, 821, 947, 454, 595, 797,  99, 357, 621, 265, 722, 791],
      [817, 706, 992, 866, 298, 688, 459, 481, 318, 822, 580, 582, 232, 848, 254],
      [354, 280, 647, 608, 626, 488,  94, 265, 432,   4, 714, 829,  51, 147, 234],
      [357,  55, 685,  90, 452, 439, 283, 557, 665, 429, 200, 951, 686, 570, 567],
      [ 81, 136, 906, 237,  17, 786, 713, 231, 240, 386, 788, 580, 976, 624,  23],
      [305, 989, 546, 288,  85,  44, 262, 433, 224, 689, 168, 126, 332,  37, 736],
      [327, 764, 168,  88, 878, 973, 691, 344, 670, 932, 139, 508, 378, 749, 269],
      [380, 467, 237, 560, 172, 613, 973, 616, 504, 659, 965, 806, 440, 657, 941],
      [527, 774, 114, 661,  25, 847, 238, 650, 831,   1, 666, 259,  24,  99,  36],
      [ 23, 373, 616,  32,  74, 832, 160, 440,  11, 134, 324,  52, 602, 410, 281],
      [886, 574, 435, 712, 108, 368, 578, 575, 142, 197, 752, 529, 841, 378, 810],
      [789, 170, 757, 186, 158,  90, 959, 601, 894, 668,  72, 480, 114, 464,  67],
    ];

    const result = matrixMultiplicationStrassen(n, m, p, matrix1, matrix2);
    // prettier-ignore
    expect(result).toEqual([
      [3330777,	3500357,	4999475,	4077468,	2939422,	4617627,	3463749,	4278655,	4452595,	2879812,	3554051,	4566422,	3053700,	3659237,	4177743],
      [3467977,	4523153,	5272848,	4243935,	2913570,	5559888,	3788147,	4741325,	4751806,	4108193,	3525054,	4423165,	3588565,	4437926,	4613229],
      [4471246,	4210825,	5234170,	3870094,	3125612,	4817863,	4588034,	4087050,	4302589,	4117229,	3873689,	5012080,	3284351,	4699870,	3791277],
      [2466224,	3358904,	4090940,	2369374,	2090852,	3547657,	2704934,	3200150,	3684852,	3294464,	2271809,	3438415,	2724989,	2867498,	2811310],
      [2740348,	3129302,	4471543,	3465809,	2303479,	4445436,	3007482,	3602670,	3624665,	3000373,	3376001,	4100781,	3178323,	3584620,	3569006],
      [3502375,	3593649,	4832912,	3972701,	3516641,	5049757,	3877771,	3789710,	4123560,	3651829,	3461933,	4860350,	3207264,	4682249,	3966854],
      [2867271,	3317944,	4177654,	2799223,	2924552,	3756954,	3510513,	3489811,	4106070,	3710099,	2285144,	3901448,	2591148,	3489356,	3383471],
      [3136076,	3667440,	4212064,	3654179,	2279156,	3904852,	3164491,	3932103,	4285225,	3446994,	2738449,	3833676,	2667946,	3411933,	4236685],
      [2623416,	3180521,	3677307,	2726073,	1832443,	2930110,	3057525,	3249204,	3005407,	2963690,	2253571,	2899176,	2354282,	2831889,	3678803],
      [3190393,	4012048,	4773252,	3536503,	2852001,	4558801,	2561245,	3587050,	3703639,	3219973,	3002026,	4001054,	2602646,	3619102,	3567916],
      [3565655,	3839723,	5142726,	3778465,	3082695,	4429121,	3111489,	3881046,	4143858,	3175164,	2860690,	4226163,	2733100,	3895090,	3778146],
      [2724552,	3825289,	4212739,	2935249,	2867677,	3922819,	3272382,	3474439,	3703970,	3438295,	2967338,	3968182,	2923958,	3075212,	3748241],
      [3089845,	3952542,	4434269,	3493725,	3638581,	4863396,	3709538,	4117465,	4640476,	3374443,	3316057,	4863606,	2991705,	3971954,	4263447],
      [2735748,	4353511,	3553262,	2973856,	2400067,	3974276,	2957455,	3412754,	3751749,	3686170,	2692674,	3407411,	2430662,	3055834,	3750631],
      [4011819,	4282074,	4542868,	3623254,	2520436,	4486138,	3854084,	4326763,	4504970,	4078666,	3328766,	4287116,	2939939,	3815272,	3712186],
    ]);
  });
});

describe("matrixMultiplicationStrassen", () => {
  it("returns correct value", () => {
    const n = 3,
      m = 2,
      p = 4;
    const matrix1 = [
      [1, 5],
      [2, 7],
      [4, 1],
    ];
    const matrix2 = [
      [1, 5, 3, 4],
      [4, 2, 1, 5],
    ];

    const result = matrixMultiplicationStrassen(n, m, p, matrix1, matrix2);
    expect(result).toEqual([
      [21, 15, 8, 29],
      [30, 24, 13, 43],
      [8, 22, 13, 21],
    ]);
  });
  it("returns correct value", () => {
    const n = 2,
      m = 2,
      p = 2;
    const matrix1 = [
      [1, 5],
      [2, 7],
    ];
    const matrix2 = [
      [1, 5],
      [4, 2],
    ];

    const result = matrixMultiplicationStrassen(n, m, p, matrix1, matrix2);
    expect(result).toEqual([
      [21, 15],
      [30, 24],
    ]);
  });
  it("returns correct value", () => {
    const n = 15,
      m = 15,
      p = 15;
    // prettier-ignore
    const matrix1 = [
      [629,  688, 397, 981, 190, 824, 546, 315, 241,  27, 509, 630, 794, 725, 780],
      [778,  277, 358, 968, 624,  63, 822, 379, 867, 619, 547, 952, 865, 615, 403],
      [ 88,  206, 931, 148, 906, 670, 368, 457, 383, 833, 938, 381, 709, 838, 936],
      [766,  828, 252,  82, 286,  37, 848, 906, 586, 519,  52, 708, 124,   6, 449],
      [680,  311, 261, 555, 502, 499, 844, 737, 236, 248, 574, 586, 468, 591, 134],
      [216,  193, 746, 908, 875, 523, 671, 446, 242, 918, 687, 217, 475, 684, 265],
      [441,  451, 249, 681, 277, 362, 681, 333, 728, 957, 330, 171, 198, 244, 970],
      [930,  111, 623, 668,  24, 132, 685, 226, 946, 292, 681, 853,  17, 714, 486],
      [438,  358, 475, 568, 104,  43,  53,  32, 991, 129, 782,  75, 786, 586, 815],
      [973,  886, 810,  88, 778, 669, 267, 237,   3, 453, 337, 593, 930, 368,  17],
      [269,  107, 993, 775, 559, 703, 666, 133, 969, 331, 114, 605, 915, 513, 579],
      [731,  999, 192, 304,   1, 811, 187, 555, 573, 836, 508, 127, 456, 475, 516],
      [231, 1000, 613, 844, 221, 445, 859, 200, 382, 715, 918, 608, 759,  44, 365],
      [950,  703, 577,  16,  97, 160,  80, 341, 806, 954, 828, 807, 194, 284,  34],
      [510,  217, 147, 195, 776, 393, 876,  41, 642, 803, 604, 963, 392, 763, 937],
    ]
    // prettier-ignore
    const matrix2 = [
      [131, 521, 990, 601, 120, 689,   6, 667, 719, 951,  10, 273, 293, 543, 863],
      [522, 954, 522, 396, 734, 280, 439, 590, 607, 340, 464, 785, 435, 116, 792],
      [817, 423, 894, 540, 809, 409, 372, 280, 717, 347,  22, 839,  91, 887, 522],
      [ 14,  83, 569, 982, 821, 947, 454, 595, 797,  99, 357, 621, 265, 722, 791],
      [817, 706, 992, 866, 298, 688, 459, 481, 318, 822, 580, 582, 232, 848, 254],
      [354, 280, 647, 608, 626, 488,  94, 265, 432,   4, 714, 829,  51, 147, 234],
      [357,  55, 685,  90, 452, 439, 283, 557, 665, 429, 200, 951, 686, 570, 567],
      [ 81, 136, 906, 237,  17, 786, 713, 231, 240, 386, 788, 580, 976, 624,  23],
      [305, 989, 546, 288,  85,  44, 262, 433, 224, 689, 168, 126, 332,  37, 736],
      [327, 764, 168,  88, 878, 973, 691, 344, 670, 932, 139, 508, 378, 749, 269],
      [380, 467, 237, 560, 172, 613, 973, 616, 504, 659, 965, 806, 440, 657, 941],
      [527, 774, 114, 661,  25, 847, 238, 650, 831,   1, 666, 259,  24,  99,  36],
      [ 23, 373, 616,  32,  74, 832, 160, 440,  11, 134, 324,  52, 602, 410, 281],
      [886, 574, 435, 712, 108, 368, 578, 575, 142, 197, 752, 529, 841, 378, 810],
      [789, 170, 757, 186, 158,  90, 959, 601, 894, 668,  72, 480, 114, 464,  67],
    ];

    const result = matrixMultiplicationStrassen(n, m, p, matrix1, matrix2);
    // prettier-ignore
    expect(result).toEqual([
      [3330777,	3500357,	4999475,	4077468,	2939422,	4617627,	3463749,	4278655,	4452595,	2879812,	3554051,	4566422,	3053700,	3659237,	4177743],
      [3467977,	4523153,	5272848,	4243935,	2913570,	5559888,	3788147,	4741325,	4751806,	4108193,	3525054,	4423165,	3588565,	4437926,	4613229],
      [4471246,	4210825,	5234170,	3870094,	3125612,	4817863,	4588034,	4087050,	4302589,	4117229,	3873689,	5012080,	3284351,	4699870,	3791277],
      [2466224,	3358904,	4090940,	2369374,	2090852,	3547657,	2704934,	3200150,	3684852,	3294464,	2271809,	3438415,	2724989,	2867498,	2811310],
      [2740348,	3129302,	4471543,	3465809,	2303479,	4445436,	3007482,	3602670,	3624665,	3000373,	3376001,	4100781,	3178323,	3584620,	3569006],
      [3502375,	3593649,	4832912,	3972701,	3516641,	5049757,	3877771,	3789710,	4123560,	3651829,	3461933,	4860350,	3207264,	4682249,	3966854],
      [2867271,	3317944,	4177654,	2799223,	2924552,	3756954,	3510513,	3489811,	4106070,	3710099,	2285144,	3901448,	2591148,	3489356,	3383471],
      [3136076,	3667440,	4212064,	3654179,	2279156,	3904852,	3164491,	3932103,	4285225,	3446994,	2738449,	3833676,	2667946,	3411933,	4236685],
      [2623416,	3180521,	3677307,	2726073,	1832443,	2930110,	3057525,	3249204,	3005407,	2963690,	2253571,	2899176,	2354282,	2831889,	3678803],
      [3190393,	4012048,	4773252,	3536503,	2852001,	4558801,	2561245,	3587050,	3703639,	3219973,	3002026,	4001054,	2602646,	3619102,	3567916],
      [3565655,	3839723,	5142726,	3778465,	3082695,	4429121,	3111489,	3881046,	4143858,	3175164,	2860690,	4226163,	2733100,	3895090,	3778146],
      [2724552,	3825289,	4212739,	2935249,	2867677,	3922819,	3272382,	3474439,	3703970,	3438295,	2967338,	3968182,	2923958,	3075212,	3748241],
      [3089845,	3952542,	4434269,	3493725,	3638581,	4863396,	3709538,	4117465,	4640476,	3374443,	3316057,	4863606,	2991705,	3971954,	4263447],
      [2735748,	4353511,	3553262,	2973856,	2400067,	3974276,	2957455,	3412754,	3751749,	3686170,	2692674,	3407411,	2430662,	3055834,	3750631],
      [4011819,	4282074,	4542868,	3623254,	2520436,	4486138,	3854084,	4326763,	4504970,	4078666,	3328766,	4287116,	2939939,	3815272,	3712186],
    ]);
  });
});

describe("matrixMultiplicationTypical", () => {
  it("returns correct value", () => {
    const n = 3,
      m = 2,
      p = 4;
    const matrix1 = [
      [1, 5],
      [2, 7],
      [4, 1],
    ];
    const matrix2 = [
      [1, 5, 3, 4],
      [4, 2, 1, 5],
    ];

    const result = matrixMultiplicationTypical(n, m, p, matrix1, matrix2);
    expect(result).toEqual([
      [21, 15, 8, 29],
      [30, 24, 13, 43],
      [8, 22, 13, 21],
    ]);
  });
  it("returns correct value", () => {
    const n = 2,
      m = 2,
      p = 2;
    const matrix1 = [
      [1, 5],
      [2, 7],
    ];
    const matrix2 = [
      [1, 5],
      [4, 2],
    ];

    const result = matrixMultiplicationTypical(n, m, p, matrix1, matrix2);
    expect(result).toEqual([
      [21, 15],
      [30, 24],
    ]);
  });
  it("returns correct value", () => {
    const n = 15,
      m = 15,
      p = 15;
    // prettier-ignore
    const matrix1 = [
      [629,  688, 397, 981, 190, 824, 546, 315, 241,  27, 509, 630, 794, 725, 780],
      [778,  277, 358, 968, 624,  63, 822, 379, 867, 619, 547, 952, 865, 615, 403],
      [ 88,  206, 931, 148, 906, 670, 368, 457, 383, 833, 938, 381, 709, 838, 936],
      [766,  828, 252,  82, 286,  37, 848, 906, 586, 519,  52, 708, 124,   6, 449],
      [680,  311, 261, 555, 502, 499, 844, 737, 236, 248, 574, 586, 468, 591, 134],
      [216,  193, 746, 908, 875, 523, 671, 446, 242, 918, 687, 217, 475, 684, 265],
      [441,  451, 249, 681, 277, 362, 681, 333, 728, 957, 330, 171, 198, 244, 970],
      [930,  111, 623, 668,  24, 132, 685, 226, 946, 292, 681, 853,  17, 714, 486],
      [438,  358, 475, 568, 104,  43,  53,  32, 991, 129, 782,  75, 786, 586, 815],
      [973,  886, 810,  88, 778, 669, 267, 237,   3, 453, 337, 593, 930, 368,  17],
      [269,  107, 993, 775, 559, 703, 666, 133, 969, 331, 114, 605, 915, 513, 579],
      [731,  999, 192, 304,   1, 811, 187, 555, 573, 836, 508, 127, 456, 475, 516],
      [231, 1000, 613, 844, 221, 445, 859, 200, 382, 715, 918, 608, 759,  44, 365],
      [950,  703, 577,  16,  97, 160,  80, 341, 806, 954, 828, 807, 194, 284,  34],
      [510,  217, 147, 195, 776, 393, 876,  41, 642, 803, 604, 963, 392, 763, 937],
    ]
    // prettier-ignore
    const matrix2 = [
      [131, 521, 990, 601, 120, 689,   6, 667, 719, 951,  10, 273, 293, 543, 863],
      [522, 954, 522, 396, 734, 280, 439, 590, 607, 340, 464, 785, 435, 116, 792],
      [817, 423, 894, 540, 809, 409, 372, 280, 717, 347,  22, 839,  91, 887, 522],
      [ 14,  83, 569, 982, 821, 947, 454, 595, 797,  99, 357, 621, 265, 722, 791],
      [817, 706, 992, 866, 298, 688, 459, 481, 318, 822, 580, 582, 232, 848, 254],
      [354, 280, 647, 608, 626, 488,  94, 265, 432,   4, 714, 829,  51, 147, 234],
      [357,  55, 685,  90, 452, 439, 283, 557, 665, 429, 200, 951, 686, 570, 567],
      [ 81, 136, 906, 237,  17, 786, 713, 231, 240, 386, 788, 580, 976, 624,  23],
      [305, 989, 546, 288,  85,  44, 262, 433, 224, 689, 168, 126, 332,  37, 736],
      [327, 764, 168,  88, 878, 973, 691, 344, 670, 932, 139, 508, 378, 749, 269],
      [380, 467, 237, 560, 172, 613, 973, 616, 504, 659, 965, 806, 440, 657, 941],
      [527, 774, 114, 661,  25, 847, 238, 650, 831,   1, 666, 259,  24,  99,  36],
      [ 23, 373, 616,  32,  74, 832, 160, 440,  11, 134, 324,  52, 602, 410, 281],
      [886, 574, 435, 712, 108, 368, 578, 575, 142, 197, 752, 529, 841, 378, 810],
      [789, 170, 757, 186, 158,  90, 959, 601, 894, 668,  72, 480, 114, 464,  67],
    ];

    const result = matrixMultiplicationStrassen(n, m, p, matrix1, matrix2);
    // prettier-ignore
    expect(result).toEqual([
      [3330777,	3500357,	4999475,	4077468,	2939422,	4617627,	3463749,	4278655,	4452595,	2879812,	3554051,	4566422,	3053700,	3659237,	4177743],
      [3467977,	4523153,	5272848,	4243935,	2913570,	5559888,	3788147,	4741325,	4751806,	4108193,	3525054,	4423165,	3588565,	4437926,	4613229],
      [4471246,	4210825,	5234170,	3870094,	3125612,	4817863,	4588034,	4087050,	4302589,	4117229,	3873689,	5012080,	3284351,	4699870,	3791277],
      [2466224,	3358904,	4090940,	2369374,	2090852,	3547657,	2704934,	3200150,	3684852,	3294464,	2271809,	3438415,	2724989,	2867498,	2811310],
      [2740348,	3129302,	4471543,	3465809,	2303479,	4445436,	3007482,	3602670,	3624665,	3000373,	3376001,	4100781,	3178323,	3584620,	3569006],
      [3502375,	3593649,	4832912,	3972701,	3516641,	5049757,	3877771,	3789710,	4123560,	3651829,	3461933,	4860350,	3207264,	4682249,	3966854],
      [2867271,	3317944,	4177654,	2799223,	2924552,	3756954,	3510513,	3489811,	4106070,	3710099,	2285144,	3901448,	2591148,	3489356,	3383471],
      [3136076,	3667440,	4212064,	3654179,	2279156,	3904852,	3164491,	3932103,	4285225,	3446994,	2738449,	3833676,	2667946,	3411933,	4236685],
      [2623416,	3180521,	3677307,	2726073,	1832443,	2930110,	3057525,	3249204,	3005407,	2963690,	2253571,	2899176,	2354282,	2831889,	3678803],
      [3190393,	4012048,	4773252,	3536503,	2852001,	4558801,	2561245,	3587050,	3703639,	3219973,	3002026,	4001054,	2602646,	3619102,	3567916],
      [3565655,	3839723,	5142726,	3778465,	3082695,	4429121,	3111489,	3881046,	4143858,	3175164,	2860690,	4226163,	2733100,	3895090,	3778146],
      [2724552,	3825289,	4212739,	2935249,	2867677,	3922819,	3272382,	3474439,	3703970,	3438295,	2967338,	3968182,	2923958,	3075212,	3748241],
      [3089845,	3952542,	4434269,	3493725,	3638581,	4863396,	3709538,	4117465,	4640476,	3374443,	3316057,	4863606,	2991705,	3971954,	4263447],
      [2735748,	4353511,	3553262,	2973856,	2400067,	3974276,	2957455,	3412754,	3751749,	3686170,	2692674,	3407411,	2430662,	3055834,	3750631],
      [4011819,	4282074,	4542868,	3623254,	2520436,	4486138,	3854084,	4326763,	4504970,	4078666,	3328766,	4287116,	2939939,	3815272,	3712186],
    ]);
  });
});
